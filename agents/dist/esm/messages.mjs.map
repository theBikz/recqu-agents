{"version":3,"file":"messages.mjs","sources":["../../src/messages.ts"],"sourcesContent":["// src/messages.ts\nimport { AIMessageChunk, HumanMessage, ToolMessage, AIMessage, BaseMessage } from '@langchain/core/messages';\nimport type { ToolCall } from '@langchain/core/messages/tool';\nimport type * as t from '@/types';\n\nexport function getConverseOverrideMessage({\n  userMessage,\n  lastMessageX,\n  lastMessageY\n}: {\n  userMessage: string[];\n  lastMessageX: AIMessageChunk | null;\n  lastMessageY: ToolMessage;\n}): HumanMessage {\n  const content = `\nUser: ${userMessage[1]}\n\n---\n# YOU HAVE ALREADY RESPONDED TO THE LATEST USER MESSAGE:\n\n# Observations:\n- ${lastMessageX?.content}\n\n# Tool Calls:\n- ${lastMessageX?.tool_calls?.join('\\n- ')}\n\n# Tool Responses:\n- ${lastMessageY.content}\n`;\n\n  return new HumanMessage(content);\n}\n\nconst modifyContent = (messageType: string, content: t.ExtendedMessageContent[]): t.ExtendedMessageContent[] => {\n  return content.map(item => {\n    if (item && typeof item === 'object' && 'type' in item && item.type != null && item.type) {\n      let newType = item.type;\n      if (newType.endsWith('_delta')) {\n        newType = newType.replace('_delta', '');\n      }\n      const allowedTypes = ['image_url', 'text', 'tool_use', 'tool_result'];\n      if (!allowedTypes.includes(newType)) {\n        newType = 'text';\n      }\n\n      /* Handle the edge case for empty object 'tool_use' input in AI messages */\n      if (messageType === 'ai' && newType === 'tool_use' && 'input' in item && item.input === '') {\n        return { ...item, type: newType, input: '{}' };\n      }\n\n      return { ...item, type: newType };\n    }\n    return item;\n  });\n};\n\nexport function modifyDeltaProperties(obj?: AIMessageChunk): AIMessageChunk | undefined {\n  if (!obj || typeof obj !== 'object') return obj;\n\n  const messageType = obj._getType ? obj._getType() : '';\n\n  if (Array.isArray(obj.content)) {\n    obj.content = modifyContent(messageType, obj.content);\n  }\n  if (obj.lc_kwargs && Array.isArray(obj.lc_kwargs.content)) {\n    obj.lc_kwargs.content = modifyContent(messageType, obj.lc_kwargs.content);\n  }\n  return obj;\n}\n\nexport function formatAnthropicMessage(message: AIMessageChunk): AIMessage {\n  if (!message.tool_calls || message.tool_calls.length === 0) {\n    return new AIMessage({ content: message.content });\n  }\n\n  const toolCallMap = new Map(message.tool_calls.map(tc => [tc.id, tc]));\n  let formattedContent: string | t.ExtendedMessageContent[];\n\n  if (Array.isArray(message.content)) {\n    formattedContent = message.content.reduce<t.ExtendedMessageContent[]>((acc, item) => {\n      if (typeof item === 'object' && item !== null) {\n        const extendedItem = item as t.ExtendedMessageContent;\n        if (extendedItem.type === 'text' && extendedItem.text != null && extendedItem.text) {\n          acc.push({ type: 'text', text: extendedItem.text });\n        } else if (extendedItem.type === 'tool_use' && extendedItem.id != null && extendedItem.id) {\n          const toolCall = toolCallMap.get(extendedItem.id);\n          if (toolCall) {\n            acc.push({\n              type: 'tool_use',\n              id: extendedItem.id,\n              name: toolCall.name,\n              input: toolCall.args as unknown as string\n            });\n          }\n        } else if ('input' in extendedItem && extendedItem.input != null && extendedItem.input) {\n          try {\n            const parsedInput = JSON.parse(extendedItem.input);\n            const toolCall = message.tool_calls?.find(tc => tc.args.input === parsedInput.input);\n            if (toolCall) {\n              acc.push({\n                type: 'tool_use',\n                id: toolCall.id,\n                name: toolCall.name,\n                input: toolCall.args as unknown as string\n              });\n            }\n          } catch (e) {\n            if (extendedItem.input) {\n              acc.push({ type: 'text', text: extendedItem.input });\n            }\n          }\n        }\n      } else if (typeof item === 'string') {\n        acc.push({ type: 'text', text: item });\n      }\n      return acc;\n    }, []);\n  } else if (typeof message.content === 'string') {\n    formattedContent = message.content;\n  } else {\n    formattedContent = [];\n  }\n\n  // const formattedToolCalls: ToolCall[] = message.tool_calls.map(toolCall => ({\n  //   id: toolCall.id ?? '',\n  //   name: toolCall.name,\n  //   args: toolCall.args,\n  //   type: 'tool_call',\n  // }));\n\n  const formattedToolCalls: t.AgentToolCall[] = message.tool_calls.map(toolCall => ({\n    id: toolCall.id ?? '',\n    type: 'function',\n    function: {\n      name: toolCall.name,\n      arguments: toolCall.args\n    }\n  }));\n\n  return new AIMessage({\n    content: formattedContent,\n    tool_calls: formattedToolCalls as ToolCall[],\n    additional_kwargs: {\n      ...message.additional_kwargs,\n    }\n  });\n}\n\nexport function convertMessagesToContent(messages: BaseMessage[]): t.MessageContentComplex[] {\n  const processedContent: t.MessageContentComplex[] = [];\n\n  const addContentPart = (message: BaseMessage | null): void => {\n    const content = message?.lc_kwargs.content != null ? message.lc_kwargs.content : message?.content;\n    if (content === undefined) {\n      return;\n    }\n    if (typeof content === 'string') {\n      processedContent.push({\n        type: 'text',\n        text: content\n      });\n    } else if (Array.isArray(content)) {\n      const filteredContent = content.filter(item => item && item.type !== 'tool_use');\n      processedContent.push(...filteredContent);\n    }\n  };\n\n  let currentAIMessageIndex = -1;\n  const toolCallMap = new Map<string, t.CustomToolCall>();\n\n  for (let i = 0; i < messages.length; i++) {\n    const message = messages[i] as BaseMessage | null;\n    const messageType = message?._getType();\n\n    if (messageType === 'ai' && (message as AIMessage).tool_calls?.length) {\n      const tool_calls = (message as AIMessage).tool_calls || [];\n      for (const tool_call of tool_calls) {\n        if (!tool_call.id) {\n          continue;\n        }\n\n        toolCallMap.set(tool_call.id, tool_call);\n      }\n\n      addContentPart(message);\n      currentAIMessageIndex = processedContent.length - 1;\n      continue;\n    } else if (messageType === 'tool' && (message as ToolMessage).tool_call_id) {\n      const id = (message as ToolMessage).tool_call_id;\n      const output = (message as ToolMessage).content;\n      const tool_call = toolCallMap.get(id);\n\n      processedContent.push({\n        type: 'tool_call',\n        tool_call: Object.assign({}, tool_call, { output }),\n      });\n      const contentPart = processedContent[currentAIMessageIndex];\n      const tool_call_ids = contentPart.tool_call_ids || [];\n      tool_call_ids.push(id);\n      contentPart.tool_call_ids = tool_call_ids;\n      continue;\n    } else if (messageType !== 'ai') {\n      continue;\n    }\n\n    addContentPart(message);\n  }\n\n  return processedContent;\n}\n\nexport function formatAnthropicArtifactContent(messages: BaseMessage[]): void {\n  const lastMessage = messages[messages.length - 1];\n  if (!(lastMessage instanceof ToolMessage)) return;\n\n  // Find the latest AIMessage with tool_calls that this tool message belongs to\n  const latestAIParentIndex = findLastIndex(messages,\n    msg => (msg instanceof AIMessageChunk &&\n          (msg.tool_calls?.length ?? 0) > 0 &&\n          msg.tool_calls?.some(tc => tc.id === lastMessage.tool_call_id)) ?? false\n  );\n\n  if (latestAIParentIndex === -1) return;\n\n  // Check if any tool message after the AI message has array artifact content\n  const hasArtifactContent = messages.some(\n    (msg, i) => i > latestAIParentIndex\n      && msg instanceof ToolMessage\n      && msg.artifact != null\n      && msg.artifact?.content != null\n      && Array.isArray(msg.artifact.content)\n  );\n\n  if (!hasArtifactContent) return;\n\n  const message = messages[latestAIParentIndex] as AIMessageChunk;\n  const toolCallIds = message.tool_calls?.map(tc => tc.id) ?? [];\n\n  for (let j = latestAIParentIndex + 1; j < messages.length; j++) {\n    const msg = messages[j];\n    if (msg instanceof ToolMessage &&\n        toolCallIds.includes(msg.tool_call_id) &&\n        msg.artifact != null &&\n        Array.isArray(msg.artifact?.content) &&\n        Array.isArray(msg.content)) {\n      msg.content = msg.content.concat(msg.artifact.content);\n    }\n  }\n}\n\nexport function formatArtifactPayload(messages: BaseMessage[]): void {\n  const lastMessageY = messages[messages.length - 1];\n  if (!(lastMessageY instanceof ToolMessage)) return;\n\n  // Find the latest AIMessage with tool_calls that this tool message belongs to\n  const latestAIParentIndex = findLastIndex(messages,\n    msg => (msg instanceof AIMessageChunk &&\n          (msg.tool_calls?.length ?? 0) > 0 &&\n          msg.tool_calls?.some(tc => tc.id === lastMessageY.tool_call_id)) ?? false\n  );\n\n  if (latestAIParentIndex === -1) return;\n\n  // Check if any tool message after the AI message has array artifact content\n  const hasArtifactContent = messages.some(\n    (msg, i) => i > latestAIParentIndex\n      && msg instanceof ToolMessage\n      && msg.artifact != null\n      && msg.artifact?.content != null\n      && Array.isArray(msg.artifact.content)\n  );\n\n  if (!hasArtifactContent) return;\n\n  // Collect all relevant tool messages and their artifacts\n  const relevantMessages = messages\n    .slice(latestAIParentIndex + 1)\n    .filter(msg => msg instanceof ToolMessage) as ToolMessage[];\n\n  // Aggregate all content and artifacts\n  const aggregatedContent: t.MessageContentComplex[] = [];\n\n  relevantMessages.forEach(msg => {\n    if (!Array.isArray(msg.artifact?.content)) {\n      return;\n    }\n    if (!Array.isArray(msg.content)) {\n      return;\n    }\n    aggregatedContent.push(...msg.content);\n    msg.content = 'Tool response is included in the next message as a Human message';\n    aggregatedContent.push(...msg.artifact.content);\n  });\n\n  // Add single HumanMessage with all aggregated content\n  if (aggregatedContent.length > 0) {\n    messages.push(new HumanMessage({ content: aggregatedContent }));\n  }\n}\n\nexport function findLastIndex<T>(array: T[], predicate: (value: T) => boolean): number {\n  for (let i = array.length - 1; i >= 0; i--) {\n    if (predicate(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}"],"names":[],"mappings":"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"}