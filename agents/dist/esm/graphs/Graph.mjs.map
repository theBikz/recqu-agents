{"version":3,"file":"Graph.mjs","sources":["../../../src/graphs/Graph.ts"],"sourcesContent":["// src/graphs/Graph.ts\nimport { nanoid } from 'nanoid';\nimport { concat } from '@langchain/core/utils/stream';\nimport { ToolNode } from '@langchain/langgraph/prebuilt';\nimport { ChatVertexAI } from '@langchain/google-vertexai';\nimport { START, END, StateGraph  } from '@langchain/langgraph';\nimport { ChatOpenAI, AzureChatOpenAI } from '@langchain/openai';\nimport { Runnable, RunnableConfig } from '@langchain/core/runnables';\nimport { dispatchCustomEvent } from '@langchain/core/callbacks/dispatch';\nimport { AIMessageChunk, ToolMessage, SystemMessage } from '@langchain/core/messages';\nimport type { BaseMessage } from '@langchain/core/messages';\nimport type * as t from '@/types';\nimport { Providers, GraphEvents, GraphNodeKeys, StepTypes, Callback, ContentTypes } from '@/common';\nimport { getChatModelClass, manualToolStreamProviders } from '@/llm/providers';\nimport { ToolNode as CustomToolNode, toolsCondition } from '@/tools/ToolNode';\nimport {\n  modifyDeltaProperties,\n  formatArtifactPayload,\n  convertMessagesToContent,\n  formatAnthropicArtifactContent,\n} from '@/messages';\nimport { resetIfNotEmpty, isOpenAILike, isGoogleLike, joinKeys, sleep } from '@/utils';\nimport { createFakeStreamingLLM } from '@/llm/fake';\nimport { HandlerRegistry } from '@/events';\n\nconst { AGENT, TOOLS } = GraphNodeKeys;\nexport type GraphNode = GraphNodeKeys | typeof START;\nexport type ClientCallback<T extends unknown[]> = (graph: StandardGraph, ...args: T) => void;\nexport type ClientCallbacks = {\n  [Callback.TOOL_ERROR]?: ClientCallback<[Error, string]>;\n  [Callback.TOOL_START]?: ClientCallback<unknown[]>;\n  [Callback.TOOL_END]?: ClientCallback<unknown[]>;\n}\nexport type SystemCallbacks = {\n  [K in keyof ClientCallbacks]: ClientCallbacks[K] extends ClientCallback<infer Args>\n    ? (...args: Args) => void\n    : never;\n};\n\nexport abstract class Graph<\n  T extends t.BaseGraphState = t.BaseGraphState,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  TNodeName extends string = string,\n> {\n  abstract resetValues(): void;\n  abstract createGraphState(): t.GraphStateChannels<T>;\n  abstract initializeTools(): CustomToolNode<T> | ToolNode<T>;\n  abstract initializeModel(): Runnable;\n  abstract getRunMessages(): BaseMessage[] | undefined;\n  abstract getContentParts(): t.MessageContentComplex[] | undefined;\n  abstract generateStepId(stepKey: string): [string, number];\n  abstract getKeyList(metadata: Record<string, unknown> | undefined): (string | number | undefined)[];\n  abstract getStepKey(metadata: Record<string, unknown> | undefined): string;\n  abstract checkKeyList(keyList: (string | number | undefined)[]): boolean;\n  abstract getStepIdByKey(stepKey: string, index?: number): string\n  abstract getRunStep(stepId: string): t.RunStep | undefined;\n  abstract dispatchRunStep(stepKey: string, stepDetails: t.StepDetails): string;\n  abstract dispatchRunStepDelta(id: string, delta: t.ToolCallDelta): void;\n  abstract dispatchMessageDelta(id: string, delta: t.MessageDelta): void;\n  abstract dispatchReasoningDelta(stepId: string, delta: t.ReasoningDelta): void;\n  abstract handleToolCallCompleted(data: t.ToolEndData, metadata?: Record<string, unknown>): void;\n\n  abstract createCallModel(): (state: T, config?: RunnableConfig) => Promise<Partial<T>>;\n  abstract createWorkflow(): t.CompiledWorkflow<T>;\n  lastToken?: string;\n  tokenTypeSwitch?: 'reasoning' | 'content';\n  reasoningKey: 'reasoning_content' | 'reasoning' = 'reasoning_content';\n  currentTokenType: ContentTypes.TEXT | ContentTypes.THINK = ContentTypes.TEXT;\n  messageStepHasToolCalls: Map<string, boolean> = new Map();\n  messageIdsByStepKey: Map<string, string> = new Map();\n  prelimMessageIdsByStepKey: Map<string, string> = new Map();\n  config: RunnableConfig | undefined;\n  contentData: t.RunStep[] = [];\n  stepKeyIds: Map<string, string[]> = new Map<string, string[]>();\n  contentIndexMap: Map<string, number> = new Map();\n  toolCallStepIds: Map<string, string> = new Map();\n  /** The amount of time that should pass before another consecutive API call */\n  streamBuffer: number | undefined;\n  signal?: AbortSignal;\n}\n\nexport class StandardGraph extends Graph<\n  t.BaseGraphState,\n  GraphNode\n> {\n  private graphState: t.GraphStateChannels<t.BaseGraphState>;\n  clientOptions: t.ClientOptions;\n  boundModel: Runnable;\n  /** The last recorded timestamp that a stream API call was invoked */\n  lastStreamCall: number | undefined;\n  handlerRegistry: HandlerRegistry | undefined;\n  systemMessage: SystemMessage | undefined;\n  messages: BaseMessage[] = [];\n  runId: string | undefined;\n  tools?: t.GenericTool[];\n  toolMap?: t.ToolMap;\n  startIndex: number = 0;\n  provider: Providers;\n  toolEnd: boolean;\n  signal: AbortSignal | undefined;\n\n  constructor({\n    runId,\n    tools,\n    signal,\n    toolMap,\n    provider,\n    streamBuffer,\n    instructions,\n    reasoningKey,\n    clientOptions,\n    toolEnd = false,\n    additional_instructions = '',\n  } : t.StandardGraphInput) {\n    super();\n    this.runId = runId;\n    this.tools = tools;\n    this.signal = signal;\n    this.toolEnd = toolEnd;\n    this.toolMap = toolMap;\n    this.provider = provider;\n    this.streamBuffer = streamBuffer;\n    this.clientOptions = clientOptions;\n    this.graphState = this.createGraphState();\n    this.boundModel = this.initializeModel();\n    if (reasoningKey) {\n      this.reasoningKey = reasoningKey;\n    }\n\n    let finalInstructions = instructions ?? '';\n    if (additional_instructions) {\n      finalInstructions = finalInstructions ? `${finalInstructions}\\n\\n${additional_instructions}` : additional_instructions;\n    }\n\n    if (finalInstructions) {\n      this.systemMessage = new SystemMessage(finalInstructions);\n    }\n  }\n\n  /* Init */\n\n  resetValues(keepContent?: boolean): void {\n    this.messages = [];\n    this.config = resetIfNotEmpty(this.config, undefined);\n    if (keepContent !== true) {\n      this.contentData = resetIfNotEmpty(this.contentData, []);\n      this.contentIndexMap = resetIfNotEmpty(this.contentIndexMap, new Map());\n    }\n    this.stepKeyIds = resetIfNotEmpty(this.stepKeyIds, new Map());\n    this.toolCallStepIds = resetIfNotEmpty(this.toolCallStepIds, new Map());\n    this.messageIdsByStepKey = resetIfNotEmpty(this.messageIdsByStepKey, new Map());\n    this.messageStepHasToolCalls = resetIfNotEmpty(this.prelimMessageIdsByStepKey, new Map());\n    this.prelimMessageIdsByStepKey = resetIfNotEmpty(this.prelimMessageIdsByStepKey, new Map());\n    this.currentTokenType = resetIfNotEmpty(this.currentTokenType, ContentTypes.TEXT);\n    this.lastToken = resetIfNotEmpty(this.lastToken, undefined);\n    this.tokenTypeSwitch = resetIfNotEmpty(this.tokenTypeSwitch, undefined);\n  }\n\n  /* Run Step Processing */\n\n  getRunStep(stepId: string): t.RunStep | undefined {\n    const index = this.contentIndexMap.get(stepId);\n    if (index !== undefined) {\n      return this.contentData[index];\n    }\n    return undefined;\n  }\n\n  getStepKey(metadata: Record<string, unknown> | undefined): string {\n    if (!metadata) return '';\n\n    const keyList = this.getKeyList(metadata);\n    if (this.checkKeyList(keyList)) {\n      throw new Error('Missing metadata');\n    }\n\n    return joinKeys(keyList);\n  }\n\n  getStepIdByKey(stepKey: string, index?: number): string {\n    const stepIds = this.stepKeyIds.get(stepKey);\n    if (!stepIds) {\n      throw new Error(`No step IDs found for stepKey ${stepKey}`);\n    }\n\n    if (index === undefined) {\n      return stepIds[stepIds.length - 1];\n    }\n\n    return stepIds[index];\n  }\n\n  generateStepId(stepKey: string): [string, number] {\n    const stepIds = this.stepKeyIds.get(stepKey);\n    let newStepId: string | undefined;\n    let stepIndex = 0;\n    if (stepIds) {\n      stepIndex = stepIds.length;\n      newStepId = `step_${nanoid()}`;\n      stepIds.push(newStepId);\n      this.stepKeyIds.set(stepKey, stepIds);\n    } else {\n      newStepId = `step_${nanoid()}`;\n      this.stepKeyIds.set(stepKey, [newStepId]);\n    }\n\n    return [newStepId, stepIndex];\n  }\n\n  getKeyList(metadata: Record<string, unknown> | undefined): (string | number | undefined)[] {\n    if (!metadata) return [];\n\n    const keyList = [\n      metadata.run_id as string,\n      metadata.thread_id as string,\n      metadata.langgraph_node as string,\n      metadata.langgraph_step as number,\n      metadata.checkpoint_ns as string,\n    ];\n    if (this.currentTokenType === ContentTypes.THINK) {\n      keyList.push('reasoning');\n    }\n\n    return keyList;\n  }\n\n  checkKeyList(keyList: (string | number | undefined)[]): boolean {\n    return keyList.some((key) => key === undefined);\n  }\n\n  /* Misc.*/\n\n  getRunMessages(): BaseMessage[] | undefined {\n    return this.messages.slice(this.startIndex);\n  }\n\n  getContentParts(): t.MessageContentComplex[] | undefined {\n    return convertMessagesToContent(this.messages.slice(this.startIndex));\n  }\n\n  /* Graph */\n\n  createGraphState(): t.GraphStateChannels<t.BaseGraphState> {\n    return {\n      messages: {\n        value: (x: BaseMessage[], y: BaseMessage[]): BaseMessage[] => {\n          if (!x.length) {\n            if (this.systemMessage) {\n              x.push(this.systemMessage);\n            }\n\n            this.startIndex = x.length + y.length;\n          }\n          const current = x.concat(y);\n          this.messages = current;\n          return current;\n        },\n        default: () => [],\n      },\n    };\n  }\n\n  initializeTools(): CustomToolNode<t.BaseGraphState> | ToolNode<t.BaseGraphState> {\n    // return new ToolNode<t.BaseGraphState>(this.tools);\n    return new CustomToolNode<t.BaseGraphState>({\n      tools: this.tools || [],\n      toolMap: this.toolMap,\n      toolCallStepIds: this.toolCallStepIds,\n    });\n  }\n\n  initializeModel(): Runnable {\n    const ChatModelClass = getChatModelClass(this.provider);\n    const model = new ChatModelClass(this.clientOptions);\n\n    if (isOpenAILike(this.provider) && (model instanceof ChatOpenAI || model instanceof AzureChatOpenAI)) {\n      model.temperature = (this.clientOptions as t.OpenAIClientOptions).temperature as number;\n      model.topP = (this.clientOptions as t.OpenAIClientOptions).topP as number;\n      model.frequencyPenalty = (this.clientOptions as t.OpenAIClientOptions).frequencyPenalty as number;\n      model.presencePenalty = (this.clientOptions as t.OpenAIClientOptions).presencePenalty as number;\n      model.n = (this.clientOptions as t.OpenAIClientOptions).n as number;\n    } else if (this.provider === Providers.VERTEXAI && model instanceof ChatVertexAI) {\n      model.temperature = (this.clientOptions as t.VertexAIClientOptions).temperature as number;\n      model.topP = (this.clientOptions as t.VertexAIClientOptions).topP as number;\n      model.topK = (this.clientOptions as t.VertexAIClientOptions).topK as number;\n      model.topLogprobs = (this.clientOptions as t.VertexAIClientOptions).topLogprobs as number;\n      model.frequencyPenalty = (this.clientOptions as t.VertexAIClientOptions).frequencyPenalty as number;\n      model.presencePenalty = (this.clientOptions as t.VertexAIClientOptions).presencePenalty as number;\n      model.maxOutputTokens = (this.clientOptions as t.VertexAIClientOptions).maxOutputTokens as number;\n    }\n\n    if (!this.tools || this.tools.length === 0) {\n      return model as unknown as Runnable;\n    }\n\n    return (model as t.ModelWithTools).bindTools(this.tools);\n  }\n  overrideTestModel(responses: string[], sleep?: number): void {\n    this.boundModel = createFakeStreamingLLM(responses, sleep);\n  }\n\n  getNewModel({\n    clientOptions = {},\n    omitOriginalOptions,\n  } : {\n    clientOptions?: t.ClientOptions;\n    omitOriginalOptions?: string[]\n  }): t.ChatModelInstance {\n    const ChatModelClass = getChatModelClass(this.provider);\n    const _options = omitOriginalOptions ? Object.fromEntries(\n      Object.entries(this.clientOptions).filter(([key]) => !omitOriginalOptions.includes(key)),\n    ) : this.clientOptions;\n    const options = Object.assign(_options, clientOptions);\n    return new ChatModelClass(options);\n  }\n\n  createCallModel() {\n    return async (state: t.BaseGraphState, config?: RunnableConfig): Promise<Partial<t.BaseGraphState>> => {\n      const { provider = '' } = (config?.configurable as t.GraphConfig | undefined) ?? {} ;\n      if (!config || !provider) {\n        throw new Error(`No ${config ? 'provider' : 'config'} provided`);\n      }\n      if (!config.signal) {\n        config.signal = this.signal;\n      }\n      this.config = config;\n      const { messages } = state;\n\n      const finalMessages = messages;\n      const lastMessageX = finalMessages[finalMessages.length - 2];\n      const lastMessageY = finalMessages[finalMessages.length - 1];\n\n      if (\n        provider === Providers.BEDROCK\n        && lastMessageX instanceof AIMessageChunk\n        && lastMessageY instanceof ToolMessage\n        && typeof lastMessageX.content === 'string'\n      ) {\n        finalMessages[finalMessages.length - 2].content = '';\n      }\n\n      const isLatestToolMessage = lastMessageY instanceof ToolMessage;\n\n      if (isLatestToolMessage && provider === Providers.ANTHROPIC) {\n        formatAnthropicArtifactContent(finalMessages);\n      } else if (\n        isLatestToolMessage &&\n        (isOpenAILike(provider) || isGoogleLike(provider))\n      ) {\n        formatArtifactPayload(finalMessages);\n      }\n\n      if (this.lastStreamCall != null && this.streamBuffer != null) {\n        const timeSinceLastCall = Date.now() - this.lastStreamCall;\n        if (timeSinceLastCall < this.streamBuffer) {\n          const timeToWait = Math.ceil((this.streamBuffer - timeSinceLastCall) / 1000) * 1000;\n          await sleep(timeToWait);\n        }\n      }\n\n      this.lastStreamCall = Date.now();\n\n      if ((this.tools?.length ?? 0) > 0 && manualToolStreamProviders.has(provider)) {\n        const stream = await this.boundModel.stream(finalMessages, config);\n        let finalChunk: AIMessageChunk | undefined;\n        for await (const chunk of stream) {\n          dispatchCustomEvent(GraphEvents.CHAT_MODEL_STREAM, { chunk }, config);\n          if (!finalChunk) {\n            finalChunk = chunk;\n          } else {\n            finalChunk = concat(finalChunk, chunk);\n          }\n        }\n\n        finalChunk = modifyDeltaProperties(finalChunk);\n        return { messages: [finalChunk as AIMessageChunk] };\n      }\n\n      const finalMessage = (await this.boundModel.invoke(finalMessages, config)) as AIMessageChunk;\n      if ((finalMessage.tool_calls?.length ?? 0) > 0) {\n        finalMessage.tool_calls = finalMessage.tool_calls?.filter((tool_call) => {\n          if (!tool_call.name) {\n            return false;\n          }\n          return true;\n        });\n      }\n      return { messages: [finalMessage] };\n    };\n  }\n\n  createWorkflow(): t.CompiledWorkflow<t.BaseGraphState> {\n    const routeMessage = (state: t.BaseGraphState, config?: RunnableConfig): string => {\n      this.config = config;\n      // const lastMessage = state.messages[state.messages.length - 1] as AIMessage;\n      // if (!lastMessage?.tool_calls?.length) {\n      //   return END;\n      // }\n      // return TOOLS;\n      return toolsCondition(state);\n    };\n\n    const workflow = new StateGraph<t.BaseGraphState>({\n      channels: this.graphState,\n    })\n      .addNode(AGENT, this.createCallModel())\n      .addNode(TOOLS, this.initializeTools())\n      .addEdge(START, AGENT)\n      .addConditionalEdges(AGENT, routeMessage)\n      .addEdge(TOOLS, this.toolEnd ? END : AGENT);\n\n    return workflow.compile();\n  }\n\n  /* Dispatchers */\n\n  /**\n   * Dispatches a run step to the client, returns the step ID\n   */\n  dispatchRunStep(stepKey: string, stepDetails: t.StepDetails): string {\n    if (!this.config) {\n      throw new Error('No config provided');\n    }\n\n    const [stepId, stepIndex] = this.generateStepId(stepKey);\n    if (stepDetails.type === StepTypes.TOOL_CALLS && stepDetails.tool_calls) {\n      for (const tool_call of stepDetails.tool_calls) {\n        const toolCallId = tool_call.id ?? '';\n        if (!toolCallId || this.toolCallStepIds.has(toolCallId)) {\n          continue;\n        }\n        this.toolCallStepIds.set(toolCallId, stepId);\n      }\n    }\n\n    const runStep: t.RunStep = {\n      stepIndex,\n      id: stepId,\n      type: stepDetails.type,\n      index: this.contentData.length,\n      stepDetails,\n      usage: null,\n    };\n\n    const runId = this.runId ?? '';\n    if (runId) {\n      runStep.runId = runId;\n    }\n\n    this.contentData.push(runStep);\n    this.contentIndexMap.set(stepId, runStep.index);\n    dispatchCustomEvent(GraphEvents.ON_RUN_STEP, runStep, this.config);\n    return stepId;\n  }\n\n  handleToolCallCompleted(data: t.ToolEndData, metadata?: Record<string, unknown>): void {\n    if (!this.config) {\n      throw new Error('No config provided');\n    }\n\n    if (!data.output) {\n      return;\n    }\n\n    const { input, output } = data;\n    const { tool_call_id } = output;\n    const stepId = this.toolCallStepIds.get(tool_call_id) ?? '';\n    if (!stepId) {\n      throw new Error(`No stepId found for tool_call_id ${tool_call_id}`);\n    }\n\n    const runStep = this.getRunStep(stepId);\n    if (!runStep) {\n      throw new Error(`No run step found for stepId ${stepId}`);\n    }\n\n    const args = typeof input === 'string' ? input : input.input;\n    const tool_call = {\n      args: typeof args === 'string' ? args : JSON.stringify(args),\n      name: output.name ?? '',\n      id: output.tool_call_id,\n      output: typeof output.content === 'string'\n        ? output.content\n        : JSON.stringify(output.content),\n      progress: 1,\n    };\n\n    this.handlerRegistry?.getHandler(GraphEvents.ON_RUN_STEP_COMPLETED)?.handle(\n      GraphEvents.ON_RUN_STEP_COMPLETED,\n      { result: {\n        id: stepId,\n        index: runStep.index,\n        type: 'tool_call',\n        tool_call\n      } as t.ToolCompleteEvent,\n      },\n      metadata,\n      this,\n    );\n  }\n\n  dispatchRunStepDelta(id: string, delta: t.ToolCallDelta): void {\n    if (!this.config) {\n      throw new Error('No config provided');\n    } else if (!id) {\n      throw new Error('No step ID found');\n    }\n    const runStepDelta: t.RunStepDeltaEvent = {\n      id,\n      delta,\n    };\n    dispatchCustomEvent(GraphEvents.ON_RUN_STEP_DELTA, runStepDelta, this.config);\n  }\n\n  dispatchMessageDelta(id: string, delta: t.MessageDelta): void {\n    if (!this.config) {\n      throw new Error('No config provided');\n    }\n    const messageDelta: t.MessageDeltaEvent = {\n      id,\n      delta,\n    };\n    dispatchCustomEvent(GraphEvents.ON_MESSAGE_DELTA, messageDelta, this.config);\n  }\n\n  dispatchReasoningDelta = (stepId: string, delta: t.ReasoningDelta): void => {\n    if (!this.config) {\n      throw new Error('No config provided');\n    }\n    const reasoningDelta: t.ReasoningDeltaEvent = {\n      id: stepId,\n      delta,\n    };\n    dispatchCustomEvent(GraphEvents.ON_REASONING_DELTA, reasoningDelta, this.config);\n  };\n}\n"],"names":["CustomToolNode"],"mappings":"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"}