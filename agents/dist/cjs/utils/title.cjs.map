{"version":3,"file":"title.cjs","sources":["../../../src/utils/title.ts"],"sourcesContent":["import { z } from 'zod';\nimport { ChatPromptTemplate } from '@langchain/core/prompts';\nimport { RunnableLambda } from '@langchain/core/runnables';\nimport type { Runnable } from '@langchain/core/runnables';\nimport * as t from '@/types';\n\nconst defaultTitlePrompt = `Write a concise title for this conversation in the detected language. Title in 5 Words or Less. No Punctuation or Quotation.\n{convo}`;\n\nconst languageInstructions = 'Detect the language used in the following text. Note: words may be misspelled or cut off; use context clues to identify the language:\\n{text}';\n\nconst languagePrompt = ChatPromptTemplate.fromTemplate(languageInstructions);\n\nconst languageSchema = z.object({\n  language: z.string().describe('The detected language of the conversation')\n});\n\nconst titleSchema = z.object({\n  title: z.string().describe('A concise title for the conversation in 5 words or less, without punctuation or quotation'),\n});\n\nexport const createTitleRunnable = async (model: t.ChatModelInstance, _titlePrompt?: string): Promise<Runnable> => {\n  // Disabled since this works fine\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  /* @ts-ignore */\n  const languageLLM = model.withStructuredOutput(languageSchema);\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  /* @ts-ignore */\n  const titleLLM = model.withStructuredOutput(titleSchema);\n\n  const languageChain = languagePrompt.pipe(languageLLM);\n\n  const titlePrompt = ChatPromptTemplate.fromTemplate(_titlePrompt ?? defaultTitlePrompt);\n\n  return new RunnableLambda({\n    func: async (input: { convo: string, inputText: string, skipLanguage: boolean }): Promise<{ language: string; title: string } | { title: string }> => {\n      if (input.skipLanguage) {\n        return await titlePrompt.pipe(titleLLM).invoke({\n          convo: input.convo\n        }) as { title: string };\n      }\n      const languageResult = await languageChain.invoke({ text: input.inputText }) as { language: string } | undefined;\n      const language = languageResult?.language ?? 'English';\n      const titleResult = await titlePrompt.pipe(titleLLM).invoke({\n        language,\n        convo: input.convo\n      }) as { title: string } | undefined;\n      return { language, title: titleResult?.title ?? '' };\n    },\n  });\n};"],"names":["ChatPromptTemplate","z","RunnableLambda"],"mappings":";;;;;;AAMA,MAAM,kBAAkB,GAAG,CAAA;QACnB;AAER,MAAM,oBAAoB,GAAG,+IAA+I;AAE5K,MAAM,cAAc,GAAGA,0BAAkB,CAAC,YAAY,CAAC,oBAAoB,CAAC;AAE5E,MAAM,cAAc,GAAGC,KAAC,CAAC,MAAM,CAAC;IAC9B,QAAQ,EAAEA,KAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,2CAA2C;AAC1E,CAAA,CAAC;AAEF,MAAM,WAAW,GAAGA,KAAC,CAAC,MAAM,CAAC;IAC3B,KAAK,EAAEA,KAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,2FAA2F,CAAC;AACxH,CAAA,CAAC;AAEW,MAAA,mBAAmB,GAAG,OAAO,KAA0B,EAAE,YAAqB,KAAuB;;;;IAIhH,MAAM,WAAW,GAAG,KAAK,CAAC,oBAAoB,CAAC,cAAc,CAAC;;;IAG9D,MAAM,QAAQ,GAAG,KAAK,CAAC,oBAAoB,CAAC,WAAW,CAAC;IAExD,MAAM,aAAa,GAAG,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC;IAEtD,MAAM,WAAW,GAAGD,0BAAkB,CAAC,YAAY,CAAC,YAAY,IAAI,kBAAkB,CAAC;IAEvF,OAAO,IAAIE,wBAAc,CAAC;AACxB,QAAA,IAAI,EAAE,OAAO,KAAkE,KAAsE;AACnJ,YAAA,IAAI,KAAK,CAAC,YAAY,EAAE;gBACtB,OAAO,MAAM,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;oBAC7C,KAAK,EAAE,KAAK,CAAC;AACd,iBAAA,CAAsB;;AAEzB,YAAA,MAAM,cAAc,GAAG,MAAM,aAAa,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,SAAS,EAAE,CAAqC;AAChH,YAAA,MAAM,QAAQ,GAAG,cAAc,EAAE,QAAQ,IAAI,SAAS;YACtD,MAAM,WAAW,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;gBAC1D,QAAQ;gBACR,KAAK,EAAE,KAAK,CAAC;AACd,aAAA,CAAkC;YACnC,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,IAAI,EAAE,EAAE;SACrD;AACF,KAAA,CAAC;AACJ;;;;"}