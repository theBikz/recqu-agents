{"version":3,"file":"message_outputs.cjs","sources":["../../../../../src/llm/anthropic/utils/message_outputs.ts"],"sourcesContent":["/**\n * This util file contains functions for converting Anthropic messages to LangChain messages.\n */\nimport Anthropic from '@anthropic-ai/sdk';\nimport {\n  AIMessage,\n  UsageMetadata,\n  AIMessageChunk,\n} from '@langchain/core/messages';\nimport { ToolCall } from '@langchain/core/messages/tool';\nimport { ChatGeneration } from '@langchain/core/outputs';\nimport { AnthropicMessageResponse } from '../types.js';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function extractToolCalls(content: Record<string, any>[]): ToolCall[] {\n  const toolCalls: ToolCall[] = [];\n  for (const block of content) {\n    if (block.type === 'tool_use') {\n      toolCalls.push({\n        name: block.name,\n        args: block.input,\n        id: block.id,\n        type: 'tool_call',\n      });\n    }\n  }\n  return toolCalls;\n}\n\nexport function _makeMessageChunkFromAnthropicEvent(\n  data: Anthropic.Messages.RawMessageStreamEvent,\n  fields: {\n    streamUsage: boolean;\n    coerceContentToString: boolean;\n  }\n): {\n  chunk: AIMessageChunk;\n} | null {\n  if (data.type === 'message_start') {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { content, usage, ...additionalKwargs } = data.message;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const filteredAdditionalKwargs: Record<string, any> = {};\n    for (const [key, value] of Object.entries(additionalKwargs)) {\n      if (value !== undefined && value !== null) {\n        filteredAdditionalKwargs[key] = value;\n      }\n    }\n    const usageMetadata: UsageMetadata = {\n      input_tokens: usage.input_tokens,\n      output_tokens: usage.output_tokens,\n      total_tokens: usage.input_tokens + usage.output_tokens,\n    };\n    return {\n      chunk: new AIMessageChunk({\n        content: fields.coerceContentToString ? '' : [],\n        additional_kwargs: filteredAdditionalKwargs,\n        usage_metadata: fields.streamUsage ? usageMetadata : undefined,\n        id: data.message.id,\n      }),\n    };\n  } else if (data.type === 'message_delta') {\n    const usageMetadata: UsageMetadata = {\n      input_tokens: 0,\n      output_tokens: data.usage.output_tokens,\n      total_tokens: data.usage.output_tokens,\n    };\n    return {\n      chunk: new AIMessageChunk({\n        content: fields.coerceContentToString ? '' : [],\n        additional_kwargs: { ...data.delta },\n        usage_metadata: fields.streamUsage ? usageMetadata : undefined,\n      }),\n    };\n  } else if (\n    data.type === 'content_block_start' &&\n    data.content_block.type === 'tool_use'\n  ) {\n    const toolCallContentBlock =\n      data.content_block as Anthropic.Messages.ToolUseBlock;\n    return {\n      chunk: new AIMessageChunk({\n        content: fields.coerceContentToString\n          ? ''\n          : [\n            {\n              index: data.index,\n              ...data.content_block,\n              input: '',\n            },\n          ],\n        additional_kwargs: {},\n        tool_call_chunks: [\n          {\n            id: toolCallContentBlock.id,\n            index: data.index,\n            name: toolCallContentBlock.name,\n            args: '',\n          },\n        ],\n      }),\n    };\n  } else if (\n    data.type === 'content_block_delta' &&\n    data.delta.type === 'text_delta'\n  ) {\n    const content = data.delta.text;\n    if (content !== undefined) {\n      return {\n        chunk: new AIMessageChunk({\n          content: fields.coerceContentToString\n            ? content\n            : [\n              {\n                index: data.index,\n                ...data.delta,\n              },\n            ],\n          additional_kwargs: {},\n        }),\n      };\n    }\n  } else if (\n    data.type === 'content_block_delta' &&\n    data.delta.type === 'input_json_delta'\n  ) {\n    return {\n      chunk: new AIMessageChunk({\n        content: fields.coerceContentToString\n          ? ''\n          : [\n            {\n              index: data.index,\n              input: data.delta.partial_json,\n              type: data.delta.type,\n            },\n          ],\n        additional_kwargs: {},\n        tool_call_chunks: [\n          {\n            index: data.index,\n            args: data.delta.partial_json,\n          },\n        ],\n      }),\n    };\n  } else if (\n    data.type === 'content_block_start' &&\n    data.content_block.type === 'text'\n  ) {\n    const content = data.content_block.text;\n    if (content !== undefined) {\n      return {\n        chunk: new AIMessageChunk({\n          content: fields.coerceContentToString\n            ? content\n            : [\n              {\n                index: data.index,\n                ...data.content_block,\n              },\n            ],\n          additional_kwargs: {},\n        }),\n      };\n    }\n  }\n\n  return null;\n}\n\nexport function anthropicResponseToChatMessages(\n  messages: AnthropicMessageResponse[],\n  additionalKwargs: Record<string, unknown>\n): ChatGeneration[] {\n  const usage: Record<string, number> | null | undefined =\n    additionalKwargs.usage as Record<string, number> | null | undefined;\n  const usageMetadata =\n    usage != null\n      ? {\n        input_tokens: usage.input_tokens ?? 0,\n        output_tokens: usage.output_tokens ?? 0,\n        total_tokens: (usage.input_tokens ?? 0) + (usage.output_tokens ?? 0),\n      }\n      : undefined;\n  if (messages.length === 1 && messages[0].type === 'text') {\n    return [\n      {\n        text: messages[0].text,\n        message: new AIMessage({\n          content: messages[0].text,\n          additional_kwargs: additionalKwargs,\n          usage_metadata: usageMetadata,\n          response_metadata: additionalKwargs,\n          id: additionalKwargs.id as string,\n        }),\n      },\n    ];\n  } else {\n    const toolCalls = extractToolCalls(messages);\n    const generations: ChatGeneration[] = [\n      {\n        text: '',\n        message: new AIMessage({\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          content: messages as any,\n          additional_kwargs: additionalKwargs,\n          tool_calls: toolCalls,\n          usage_metadata: usageMetadata,\n          response_metadata: additionalKwargs,\n          id: additionalKwargs.id as string,\n        }),\n      },\n    ];\n    return generations;\n  }\n}"],"names":["AIMessageChunk"],"mappings":"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"}