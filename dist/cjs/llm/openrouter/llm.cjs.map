{"version":3,"file":"llm.cjs","sources":["../../../../src/llm/openrouter/llm.ts"],"sourcesContent":["import { ChatOpenAI } from '@langchain/openai';\nimport type { ChatOpenAICallOptions, OpenAIClient } from '@langchain/openai';\nimport type { AIMessageChunk, HumanMessageChunk, SystemMessageChunk, FunctionMessageChunk, ToolMessageChunk, ChatMessageChunk} from '@langchain/core/messages';\nexport interface ChatOpenRouterCallOptions extends ChatOpenAICallOptions {\n  include_reasoning?: boolean;\n}\nexport class ChatOpenRouter extends ChatOpenAI<ChatOpenRouterCallOptions> {\n  constructor(_fields: Partial<ChatOpenRouterCallOptions>) {\n    const { include_reasoning, ...fields } = _fields;\n    super({\n      ...fields,\n      modelKwargs: {\n        include_reasoning,\n      }\n    });\n  }\n  protected override _convertOpenAIDeltaToBaseMessageChunk(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    delta: Record<string, any>,\n    rawResponse: OpenAIClient.ChatCompletionChunk,\n    defaultRole?:\n    | 'function'\n    | 'user'\n    | 'system'\n    | 'developer'\n    | 'assistant'\n    | 'tool'\n  ): AIMessageChunk | HumanMessageChunk | SystemMessageChunk | FunctionMessageChunk | ToolMessageChunk | ChatMessageChunk {\n    const messageChunk = super._convertOpenAIDeltaToBaseMessageChunk(\n      delta,\n      rawResponse,\n      defaultRole\n    );\n    messageChunk.additional_kwargs.reasoning = delta.reasoning;\n    return messageChunk;\n  }\n}"],"names":["ChatOpenAI"],"mappings":";;;;AAMM,MAAO,cAAe,SAAQA,iBAAqC,CAAA;AACvE,IAAA,WAAA,CAAY,OAA2C,EAAA;QACrD,MAAM,EAAE,iBAAiB,EAAE,GAAG,MAAM,EAAE,GAAG,OAAO;AAChD,QAAA,KAAK,CAAC;AACJ,YAAA,GAAG,MAAM;AACT,YAAA,WAAW,EAAE;gBACX,iBAAiB;AAClB;AACF,SAAA,CAAC;;IAEe,qCAAqC;;IAEtD,KAA0B,EAC1B,WAA6C,EAC7C,WAMQ,EAAA;AAER,QAAA,MAAM,YAAY,GAAG,KAAK,CAAC,qCAAqC,CAC9D,KAAK,EACL,WAAW,EACX,WAAW,CACZ;QACD,YAAY,CAAC,iBAAiB,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS;AAC1D,QAAA,OAAO,YAAY;;AAEtB;;;;"}