{"version":3,"file":"fake.cjs","sources":["../../../src/llm/fake.ts"],"sourcesContent":["import type { BaseMessage } from '@langchain/core/messages';\nimport type { ChatGenerationChunk } from '@langchain/core/outputs';\nimport type { CallbackManagerForLLMRun } from '@langchain/core/callbacks/manager';\nimport { FakeListChatModel } from '@langchain/core/utils/testing';\n\ntype SplitStrategy = {\n  type: 'regex' | 'fixed';\n  value: RegExp | number;\n};\n\nexport class FakeChatModel extends FakeListChatModel {\n  private splitStrategy: SplitStrategy;\n\n  constructor({\n    responses,\n    sleep,\n    emitCustomEvent,\n    splitStrategy = { type: 'regex', value: /(?<=\\s+)|(?=\\s+)/ }\n  }: {\n    responses: string[];\n    sleep?: number;\n    emitCustomEvent?: boolean;\n    splitStrategy?: SplitStrategy;\n  }) {\n    super({ responses, sleep, emitCustomEvent });\n    this.splitStrategy = splitStrategy;\n  }\n\n  private splitText(text: string): string[] {\n    if (this.splitStrategy.type === 'regex') {\n      return text.split(this.splitStrategy.value as RegExp);\n    } else {\n      const chunkSize = this.splitStrategy.value as number;\n      const chunks: string[] = [];\n      for (let i = 0; i < text.length; i += chunkSize) {\n        chunks.push(text.slice(i, i + chunkSize));\n      }\n      return chunks;\n    }\n  }\n\n  async *_streamResponseChunks(\n    _messages: BaseMessage[],\n    options: this['ParsedCallOptions'],\n    runManager?: CallbackManagerForLLMRun\n  ): AsyncGenerator<ChatGenerationChunk> {\n    const response = this._currentResponse();\n    this._incrementResponse();\n\n    if (this.emitCustomEvent) {\n      await runManager?.handleCustomEvent('some_test_event', {\n        someval: true,\n      });\n    }\n\n    const chunks = this.splitText(response);\n\n    for await (const chunk of chunks) {\n      await this._sleepIfRequested();\n\n      if (options.thrownErrorString != null && options.thrownErrorString) {\n        throw new Error(options.thrownErrorString);\n      }\n\n      const responseChunk = this._createResponseChunk(chunk);\n      yield responseChunk;\n      void runManager?.handleLLMNewToken(chunk);\n    }\n  }\n}\n\nexport function createFakeStreamingLLM(\n  responses: string[],\n  sleep?: number,\n  splitStrategy?: SplitStrategy\n): FakeChatModel {\n  return new FakeChatModel({\n    sleep,\n    responses,\n    emitCustomEvent: true,\n    splitStrategy,\n  });\n}"],"names":["FakeListChatModel"],"mappings":";;;;AAUM,MAAO,aAAc,SAAQA,yBAAiB,CAAA;AAC1C,IAAA,aAAa;AAErB,IAAA,WAAA,CAAY,EACV,SAAS,EACT,KAAK,EACL,eAAe,EACf,aAAa,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,kBAAkB,EAAE,EAM7D,EAAA;QACC,KAAK,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC;AAC5C,QAAA,IAAI,CAAC,aAAa,GAAG,aAAa;;AAG5B,IAAA,SAAS,CAAC,IAAY,EAAA;QAC5B,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,OAAO,EAAE;YACvC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,KAAe,CAAC;;aAChD;AACL,YAAA,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,KAAe;YACpD,MAAM,MAAM,GAAa,EAAE;AAC3B,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,SAAS,EAAE;AAC/C,gBAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC;;AAE3C,YAAA,OAAO,MAAM;;;IAIjB,OAAO,qBAAqB,CAC1B,SAAwB,EACxB,OAAkC,EAClC,UAAqC,EAAA;AAErC,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,EAAE;QACxC,IAAI,CAAC,kBAAkB,EAAE;AAEzB,QAAA,IAAI,IAAI,CAAC,eAAe,EAAE;AACxB,YAAA,MAAM,UAAU,EAAE,iBAAiB,CAAC,iBAAiB,EAAE;AACrD,gBAAA,OAAO,EAAE,IAAI;AACd,aAAA,CAAC;;QAGJ,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;AAEvC,QAAA,WAAW,MAAM,KAAK,IAAI,MAAM,EAAE;AAChC,YAAA,MAAM,IAAI,CAAC,iBAAiB,EAAE;YAE9B,IAAI,OAAO,CAAC,iBAAiB,IAAI,IAAI,IAAI,OAAO,CAAC,iBAAiB,EAAE;AAClE,gBAAA,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC;;YAG5C,MAAM,aAAa,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC;AACtD,YAAA,MAAM,aAAa;AACnB,YAAA,KAAK,UAAU,EAAE,iBAAiB,CAAC,KAAK,CAAC;;;AAG9C;SAEe,sBAAsB,CACpC,SAAmB,EACnB,KAAc,EACd,aAA6B,EAAA;IAE7B,OAAO,IAAI,aAAa,CAAC;QACvB,KAAK;QACL,SAAS;AACT,QAAA,eAAe,EAAE,IAAI;QACrB,aAAa;AACd,KAAA,CAAC;AACJ;;;;;"}