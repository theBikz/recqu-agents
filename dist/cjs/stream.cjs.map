{"version":3,"file":"stream.cjs","sources":["../../src/stream.ts"],"sourcesContent":["// src/stream.ts\nimport { nanoid } from 'nanoid';\nimport type { AIMessageChunk } from '@langchain/core/messages';\nimport type { ToolCall, ToolCallChunk } from '@langchain/core/messages/tool';\nimport type { Graph } from '@/graphs';\nimport type * as t from '@/types';\nimport { StepTypes, ContentTypes, GraphEvents, ToolCallTypes } from '@/common';\n\nfunction getNonEmptyValue(possibleValues: string[]): string | undefined {\n  for (const value of possibleValues) {\n    if (value && value.trim() !== '') {\n      return value;\n    }\n  }\n  return undefined;\n}\n\nexport const getMessageId = (stepKey: string, graph: Graph<t.BaseGraphState>, returnExistingId = false): string | undefined => {\n  const messageId = graph.messageIdsByStepKey.get(stepKey);\n  if (messageId != null && messageId) {\n    return returnExistingId ? messageId : undefined;\n  }\n\n  const prelimMessageId = graph.prelimMessageIdsByStepKey.get(stepKey);\n  if (prelimMessageId != null && prelimMessageId) {\n    graph.prelimMessageIdsByStepKey.delete(stepKey);\n    graph.messageIdsByStepKey.set(stepKey, prelimMessageId);\n    return prelimMessageId;\n  }\n\n  const message_id = `msg_${nanoid()}`;\n  graph.messageIdsByStepKey.set(stepKey, message_id);\n  return message_id;\n};\n\nexport const handleToolCalls = (toolCalls?: ToolCall[], metadata?: Record<string, unknown>, graph?: Graph): void => {\n  if (!graph || !metadata) {\n    console.warn(`Graph or metadata not found in ${event} event`);\n    return;\n  }\n\n  if (!toolCalls) {\n    return;\n  }\n\n  if (toolCalls.length === 0) {\n    return;\n  }\n\n  const tool_calls: ToolCall[] = [];\n  const tool_call_ids: string[] = [];\n  for (const tool_call of toolCalls) {\n    const toolCallId = tool_call.id ?? `toolu_${nanoid()}`;\n    tool_call.id = toolCallId;\n    if (!toolCallId || graph.toolCallStepIds.has(toolCallId)) {\n      continue;\n    }\n\n    tool_calls.push(tool_call);\n    tool_call_ids.push(toolCallId);\n  }\n\n  const stepKey = graph.getStepKey(metadata);\n\n  let prevStepId = '';\n  let prevRunStep: t.RunStep | undefined;\n  try {\n    prevStepId = graph.getStepIdByKey(stepKey, graph.contentData.length - 1);\n    prevRunStep = graph.getRunStep(prevStepId);\n  } catch (e) {\n    // no previous step\n  }\n\n  const dispatchToolCallIds = (lastMessageStepId: string): void => {\n    graph.dispatchMessageDelta(lastMessageStepId, {\n      content: [{\n        type: 'text',\n        text: '',\n        tool_call_ids,\n      }],\n    });\n  };\n    /* If the previous step exists and is a message creation */\n  if (prevStepId && prevRunStep && prevRunStep.type === StepTypes.MESSAGE_CREATION) {\n    dispatchToolCallIds(prevStepId);\n    graph.messageStepHasToolCalls.set(prevStepId, true);\n    /* If the previous step doesn't exist or is not a message creation */\n  } else if (!prevRunStep || prevRunStep.type !== StepTypes.MESSAGE_CREATION) {\n    const messageId = getMessageId(stepKey, graph, true) ?? '';\n    const stepId = graph.dispatchRunStep(stepKey, {\n      type: StepTypes.MESSAGE_CREATION,\n      message_creation: {\n        message_id: messageId,\n      },\n    });\n    dispatchToolCallIds(stepId);\n    graph.messageStepHasToolCalls.set(prevStepId, true);\n  }\n  graph.dispatchRunStep(stepKey, {\n    type: StepTypes.TOOL_CALLS,\n    tool_calls,\n  });\n};\n\nexport class ChatModelStreamHandler implements t.EventHandler {\n  handle(event: string, data: t.StreamEventData, metadata?: Record<string, unknown>, graph?: Graph): void {\n    if (!graph) {\n      throw new Error('Graph not found');\n    }\n    if (!graph.config) {\n      throw new Error('Config not found in graph');\n    }\n    if (!data.chunk) {\n      console.warn(`No chunk found in ${event} event`);\n      return;\n    }\n\n    const chunk = data.chunk as Partial<AIMessageChunk>;\n    const content = (chunk.additional_kwargs?.[graph.reasoningKey] as string | undefined) ?? chunk.content;\n    this.handleReasoning(chunk, graph);\n\n    let hasToolCalls = false;\n    if (chunk.tool_calls && chunk.tool_calls.length > 0 && chunk.tool_calls.every((tc) => tc.id)) {\n      hasToolCalls = true;\n      handleToolCalls(chunk.tool_calls, metadata, graph);\n    }\n\n    const hasToolCallChunks = (chunk.tool_call_chunks && chunk.tool_call_chunks.length > 0) ?? false;\n    const isEmptyContent = typeof content === 'undefined' || !content.length || typeof content === 'string' && !content;\n    const isEmptyChunk = isEmptyContent && !hasToolCallChunks;\n    const chunkId = chunk.id ?? '';\n    if (isEmptyChunk && chunkId && chunkId.startsWith('msg')) {\n      if (graph.messageIdsByStepKey.has(chunkId)) {\n        return;\n      } else if (graph.prelimMessageIdsByStepKey.has(chunkId)) {\n        return;\n      }\n\n      const stepKey = graph.getStepKey(metadata);\n      graph.prelimMessageIdsByStepKey.set(stepKey, chunkId);\n      return;\n    } else if (isEmptyChunk) {\n      return;\n    }\n\n    const stepKey = graph.getStepKey(metadata);\n\n    if (hasToolCallChunks\n      && chunk.tool_call_chunks\n      && chunk.tool_call_chunks.length\n      && typeof chunk.tool_call_chunks[0]?.index === 'number') {\n      this.handleToolCallChunks({ graph, stepKey, toolCallChunks: chunk.tool_call_chunks });\n    }\n\n    if (isEmptyContent) {\n      return;\n    }\n\n    const message_id = getMessageId(stepKey, graph) ?? '';\n    if (message_id) {\n      graph.dispatchRunStep(stepKey, {\n        type: StepTypes.MESSAGE_CREATION,\n        message_creation: {\n          message_id,\n        },\n      });\n    }\n\n    const stepId = graph.getStepIdByKey(stepKey);\n    const runStep = graph.getRunStep(stepId);\n    if (!runStep) {\n      // eslint-disable-next-line no-console\n      console.warn(`\\n\n==============================================================\n\n\nRun step for ${stepId} does not exist, cannot dispatch delta event.\n\nevent: ${event}\nstepId: ${stepId}\nstepKey: ${stepKey}\nmessage_id: ${message_id}\nhasToolCalls: ${hasToolCalls}\nhasToolCallChunks: ${hasToolCallChunks}\n\n==============================================================\n\\n`);\n      return;\n    }\n\n    /* Note: tool call chunks may have non-empty content that matches the current tool chunk generation */\n    if (typeof content === 'string' && runStep.type === StepTypes.TOOL_CALLS) {\n      return;\n    } else if (hasToolCallChunks && (chunk.tool_call_chunks?.some((tc) => tc.args === content) ?? false)) {\n      return;\n    } else if (typeof content === 'string') {\n      if (graph.currentTokenType === ContentTypes.TEXT) {\n        graph.dispatchMessageDelta(stepId, {\n          content: [{\n            type: ContentTypes.TEXT,\n            text: content,\n          }],\n        });\n      } else {\n        graph.dispatchReasoningDelta(stepId, {\n          content: [{\n            type: ContentTypes.THINK,\n            think: content,\n          }],\n        });\n      }\n    } else if (content.every((c) => c.type?.startsWith(ContentTypes.TEXT))) {\n      graph.dispatchMessageDelta(stepId, {\n        content,\n      });\n    }\n  }\n  handleToolCallChunks = ({\n    graph,\n    stepKey,\n    toolCallChunks,\n  }: {\n    graph: Graph;\n    stepKey: string;\n    toolCallChunks: ToolCallChunk[],\n  }): void => {\n    const prevStepId = graph.getStepIdByKey(stepKey, graph.contentData.length - 1);\n    const prevRunStep = graph.getRunStep(prevStepId);\n    const _stepId = graph.getStepIdByKey(stepKey, prevRunStep?.index);\n    /** Edge Case: Tool Call Run Step or `tool_call_ids` never dispatched */\n    const tool_calls: ToolCall[] | undefined =\n    prevStepId && prevRunStep && prevRunStep.type === StepTypes.MESSAGE_CREATION\n      ? []\n      : undefined;\n    /** Edge Case: `id` and `name` fields cannot be empty strings */\n    for (const toolCallChunk of toolCallChunks) {\n      if (toolCallChunk.name === '') {\n        toolCallChunk.name = undefined;\n      }\n      if (toolCallChunk.id === '') {\n        toolCallChunk.id = undefined;\n      } else if (tool_calls != null && toolCallChunk.id != null && toolCallChunk.name != null) {\n        tool_calls.push({\n          args: {},\n          id: toolCallChunk.id,\n          name: toolCallChunk.name,\n          type: ToolCallTypes.TOOL_CALL,\n        });\n      }\n    }\n\n    let stepId: string = _stepId;\n    const alreadyDispatched = prevRunStep?.type === StepTypes.MESSAGE_CREATION && graph.messageStepHasToolCalls.has(prevStepId);\n    if (!alreadyDispatched && tool_calls?.length === toolCallChunks.length) {\n      graph.dispatchMessageDelta(prevStepId, {\n        content: [{\n          type: ContentTypes.TEXT,\n          text: '',\n          tool_call_ids: tool_calls.map((tc) => tc.id ?? ''),\n        }],\n      });\n      graph.messageStepHasToolCalls.set(prevStepId, true);\n      stepId = graph.dispatchRunStep(stepKey, {\n        type: StepTypes.TOOL_CALLS,\n        tool_calls,\n      });\n    }\n    graph.dispatchRunStepDelta(stepId, {\n      type: StepTypes.TOOL_CALLS,\n      tool_calls: toolCallChunks,\n    });\n  };\n  handleReasoning(chunk: Partial<AIMessageChunk>, graph: Graph): void {\n    const reasoning_content = chunk.additional_kwargs?.[graph.reasoningKey] as string | undefined;\n    if (reasoning_content != null && reasoning_content && (chunk.content == null || chunk.content === '')) {\n      graph.currentTokenType = ContentTypes.THINK;\n      graph.tokenTypeSwitch = 'reasoning';\n      return;\n    } else if (graph.tokenTypeSwitch === 'reasoning' && graph.currentTokenType !== ContentTypes.TEXT && chunk.content != null && chunk.content !== '') {\n      graph.currentTokenType = ContentTypes.TEXT;\n      graph.tokenTypeSwitch = 'content';\n    } else if (chunk.content != null && typeof chunk.content === 'string' && chunk.content.includes('<think>')) {\n      graph.currentTokenType = ContentTypes.THINK;\n      graph.tokenTypeSwitch = 'content';\n    } else if (graph.lastToken != null && graph.lastToken.includes('</think>')) {\n      graph.currentTokenType = ContentTypes.TEXT;\n      graph.tokenTypeSwitch = 'content';\n    }\n    if (typeof chunk.content !== 'string') {\n      return;\n    }\n    graph.lastToken = chunk.content;\n  }\n}\n\nexport function createContentAggregator(): t.ContentAggregatorResult {\n  const contentParts: Array<t.MessageContentComplex | undefined> = [];\n  const stepMap = new Map<string, t.RunStep>();\n  const toolCallIdMap = new Map<string, string>();\n\n  const updateContent = (\n    index: number,\n    contentPart: t.MessageContentComplex,\n    finalUpdate = false,\n  ): void => {\n    const partType = contentPart.type ?? '';\n    if (!partType) {\n      console.warn('No content type found in content part');\n      return;\n    }\n\n    if (!contentParts[index]) {\n      contentParts[index] = { type: partType };\n    }\n\n    if (!partType.startsWith(contentParts[index]?.type ?? '')) {\n      console.warn('Content type mismatch');\n      return;\n    }\n\n    if (\n      partType.startsWith(ContentTypes.TEXT) &&\n      ContentTypes.TEXT in contentPart &&\n      typeof contentPart.text === 'string'\n    ) {\n      // TODO: update this!!\n      const currentContent = contentParts[index] as t.MessageDeltaUpdate;\n      const update: t.MessageDeltaUpdate = {\n        type: ContentTypes.TEXT,\n        text: (currentContent.text || '') + contentPart.text,\n      };\n\n      if (contentPart.tool_call_ids) {\n        update.tool_call_ids = contentPart.tool_call_ids;\n      }\n      contentParts[index] = update;\n    } else if (\n      partType.startsWith(ContentTypes.THINK) &&\n      ContentTypes.THINK in contentPart &&\n      typeof contentPart.think === 'string'\n    ) {\n      const currentContent = contentParts[index] as t.ReasoningDeltaUpdate;\n      const update: t.ReasoningDeltaUpdate = {\n        type: ContentTypes.THINK,\n        think: (currentContent.think || '') + contentPart.think,\n      };\n      contentParts[index] = update;\n    } else if (partType === ContentTypes.IMAGE_URL && 'image_url' in contentPart) {\n      const currentContent = contentParts[index] as { type: 'image_url'; image_url: string };\n      contentParts[index] = {\n        ...currentContent,\n      };\n    } else if (partType === ContentTypes.TOOL_CALL && 'tool_call' in contentPart) {\n      const existingContent = contentParts[index] as Omit<t.ToolCallContent, 'tool_call'> & { tool_call?: ToolCall } | undefined;\n\n      const args = finalUpdate\n        ? contentPart.tool_call.args\n        : (existingContent?.tool_call?.args || '') + (contentPart.tool_call.args ?? '');\n\n      const id = getNonEmptyValue([contentPart.tool_call.id, existingContent?.tool_call?.id]) ?? '';\n      const name =\n        getNonEmptyValue([contentPart.tool_call.name, existingContent?.tool_call?.name]) ?? '';\n\n      const newToolCall: ToolCall & t.PartMetadata = {\n        id,\n        name,\n        args,\n        type: ToolCallTypes.TOOL_CALL,\n      };\n\n      if (finalUpdate) {\n        newToolCall.progress = 1;\n        newToolCall.output = contentPart.tool_call.output;\n      }\n\n      contentParts[index] = {\n        type: ContentTypes.TOOL_CALL,\n        tool_call: newToolCall,\n      };\n    }\n  };\n\n  const aggregateContent = ({ event, data }: {\n    event: GraphEvents;\n    data: t.RunStep | t.MessageDeltaEvent | t.RunStepDeltaEvent | { result: t.ToolEndEvent };\n  }): void => {\n\n    if (event === GraphEvents.ON_RUN_STEP) {\n      const runStep = data as t.RunStep;\n      stepMap.set(runStep.id, runStep);\n\n      // Store tool call IDs if present\n      if (runStep.stepDetails.type === StepTypes.TOOL_CALLS && runStep.stepDetails.tool_calls) {\n        runStep.stepDetails.tool_calls.forEach((toolCall) => {\n          const toolCallId = toolCall.id ?? '';\n          if ('id' in toolCall && toolCallId) {\n            toolCallIdMap.set(runStep.id, toolCallId);\n          }\n        });\n      }\n    } else if (event === GraphEvents.ON_MESSAGE_DELTA) {\n      const messageDelta = data as t.MessageDeltaEvent;\n      const runStep = stepMap.get(messageDelta.id);\n      if (!runStep) {\n        console.warn('No run step or runId found for message delta event');\n        return;\n      }\n\n      if (messageDelta.delta.content) {\n        const contentPart = Array.isArray(messageDelta.delta.content)\n          ? messageDelta.delta.content[0]\n          : messageDelta.delta.content;\n\n        updateContent(runStep.index, contentPart);\n      }\n    } else if (event === GraphEvents.ON_REASONING_DELTA) {\n      const reasoningDelta = data as t.ReasoningDeltaEvent;\n      const runStep = stepMap.get(reasoningDelta.id);\n      if (!runStep) {\n        console.warn('No run step or runId found for reasoning delta event');\n        return;\n      }\n\n      if (reasoningDelta.delta.content) {\n        const contentPart = Array.isArray(reasoningDelta.delta.content)\n          ? reasoningDelta.delta.content[0]\n          : reasoningDelta.delta.content;\n\n        updateContent(runStep.index, contentPart);\n      }\n    } else if (event === GraphEvents.ON_RUN_STEP_DELTA) {\n      const runStepDelta = data as t.RunStepDeltaEvent;\n      const runStep = stepMap.get(runStepDelta.id);\n      if (!runStep) {\n        console.warn('No run step or runId found for run step delta event');\n        return;\n      }\n\n      if (\n        runStepDelta.delta.type === StepTypes.TOOL_CALLS &&\n        runStepDelta.delta.tool_calls\n      ) {\n\n        runStepDelta.delta.tool_calls.forEach((toolCallDelta) => {\n          const toolCallId = toolCallIdMap.get(runStepDelta.id);\n\n          const contentPart: t.MessageContentComplex = {\n            type: ContentTypes.TOOL_CALL,\n            tool_call: {\n              args: toolCallDelta.args ?? '',\n              name: toolCallDelta.name,\n              id: toolCallId,\n            },\n          };\n\n          updateContent(runStep.index, contentPart);\n        });\n      }\n    } else if (event === GraphEvents.ON_RUN_STEP_COMPLETED) {\n      const { result } = data as unknown as { result: t.ToolEndEvent };\n\n      const { id: stepId } = result;\n\n      const runStep = stepMap.get(stepId);\n      if (!runStep) {\n        console.warn('No run step or runId found for completed tool call event');\n        return;\n      }\n\n      const contentPart: t.MessageContentComplex = {\n        type: ContentTypes.TOOL_CALL,\n        tool_call: result.tool_call,\n      };\n\n      updateContent(runStep.index, contentPart, true);\n    }\n\n  };\n\n  return { contentParts, aggregateContent, stepMap };\n}\n"],"names":["nanoid","StepTypes","ContentTypes","ToolCallTypes","GraphEvents"],"mappings":"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"}